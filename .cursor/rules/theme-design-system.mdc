---
globs: app/**/*.tsx,src/**/*.tsx
alwaysApply: false
---

# Theme Design System

## Design System Components

Use themed components from the design system that integrate with your theme:

```tsx
// ✅ Good - Use design system components
import {
  Box,
  Text,
  Button,
  Card,
  Input,
  Modal,
  Loading,
} from '@/src/design-system/components'

// ❌ Bad - Direct React Native imports
import { Text, View, Pressable } from 'react-native'
```

## Theme Hook

Use the centralized theme hook for direct access to design tokens:

```tsx
import { useTheme } from '@/src/design-system/hooks/useTheme'

// ✅ Good - Use theme hook
const { colors, spacing, typography, radii, shadows } = useTheme()
```

## Themed Components Usage

### Text Component

Use variant props for consistent typography:

```tsx
// ✅ Good - Use variant props
<Text variant="heading">Main Heading</Text>
<Text variant="body">Body text content</Text>

// ✅ Good - Use theme tokens for colors
const { colors } = useTheme()
<Text variant="caption" color={colors.textSecondary}>Secondary text</Text>

// ❌ Bad - Manual styling
<Text style={{ fontSize: 32, fontWeight: 'bold' }}>Heading</Text>
```

### Box Component

Use spacing and layout props for consistent layouts:

```tsx
// ✅ Good - Use Box with spacing props
<Box padding="md" gap="sm">
  <Text variant="heading">Card Title</Text>
  <Text variant="body">Card content</Text>
</Box>

// ✅ Good - Use Card for elevated content with shadows
<Card variant="elevated" padding="md">
  <Text variant="heading">Card Title</Text>
  <Text variant="body">Card content</Text>
</Card>

// ❌ Bad - Manual styling
<Box style={{
  backgroundColor: '#fff',
  padding: 16,
  borderRadius: 8,
  shadowColor: '#000',
  shadowOffset: { width: 0, height: 2 },
  shadowOpacity: 0.1,
  shadowRadius: 4,
  elevation: 3
}}>
```

### Button Component

Use variant props for interactive elements:

```tsx
// ✅ Good - Use Button component
<Button variant="primary" onPress={handlePress}>
  Click Me
</Button>

// ❌ Bad - Manual styling
<Button style={{
  backgroundColor: '#007AFF',
  padding: 12,
  borderRadius: 8
}}>
```

## Direct Theme Access

When you need direct access to design tokens, use the theme hook:

```tsx
// ✅ Good - Use theme hook for custom styling
const { colors, spacing, typography, radii, shadows } = useTheme()

const styles = StyleSheet.create({
  container: {
    padding: spacing.md,
    marginBottom: spacing.lg,
    backgroundColor: colors.surface,
  },
  customCard: {
    ...shadows.md,
    borderRadius: radii.md,
    padding: spacing.md,
  },
})

// ❌ Bad - Hardcoded values
const styles = StyleSheet.create({
  container: {
    padding: 16,
    marginBottom: 24,
    backgroundColor: '#fff',
  },
})
```

## Component Props

### Text Component Props

```tsx
type TextProps = {
  variant?: 'body' | 'heading' | 'subheading' | 'caption' | 'label'
  style?: TextStyle
}
```

### Box Component Props

```tsx
type BoxProps = {
  padding?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'
  gap?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'
  borderRadius?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full'
  style?: ViewStyle
}
```

### Button Component Props

```tsx
type ButtonProps = {
  variant?: 'primary' | 'secondary' | 'ghost' | 'link'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  onPress?: () => void
  style?: ViewStyle
}
```

## File Organization

### Design System Structure

```
src/
  design-system/
    components/
      Box.tsx           // Layout component
      Text.tsx          // Typography component
      Button.tsx        // Interactive component
      Card.tsx          // Card component
      Input.tsx         // Form component
      Modal.tsx         // Modal component
      Loading.tsx       // Loading component
      index.ts          // Re-exports
    hooks/
      useTheme.ts       // Theme hook
    theme.ts            // Theme configuration
```

### Import Patterns

```tsx
// ✅ Good - Import design system components
import {
  Box,
  Text,
  Button,
  Card,
  Input,
  Modal,
  Loading,
} from '@/src/design-system/components'

// ✅ Good - Import theme hook for custom styling
import { useTheme } from '@/src/design-system/hooks/useTheme'

// ❌ Bad - Direct React Native imports
import { Text, View, Pressable } from 'react-native'
```

## Best Practices

1. **Use design system components** instead of direct React Native imports
2. **Leverage variant props** for consistent styling
3. **Use theme hook** for custom styling needs
4. **Prefer component props** over manual StyleSheet creation
5. **Maintain type safety** with proper TypeScript types
6. **Use semantic naming** for design tokens
7. **Apply platform-appropriate shadows** automatically
8. **Avoid hard-coded hex values** - prefer tokens from useTheme() unless designing a new token

## Common Patterns

### Card Component

```tsx
// ✅ Good - Use design system components
<Card variant="elevated" padding="md">
  <Text variant="heading">Card Title</Text>
  <Text variant="body">Card content goes here</Text>
</Card>
```

### Button Component

```tsx
// ✅ Good - Use design system components
<Button variant="primary" onPress={handlePress}>
  Click Me
</Button>
```

### Custom Styling

```tsx
// ✅ Good - Use theme hook for custom needs
const { colors, spacing, radii, shadows } = useTheme()

const styles = StyleSheet.create({
  customContainer: {
    backgroundColor: colors.surface,
    padding: spacing.lg,
    borderRadius: radii.md,
    ...shadows.md, // Apply shadow from theme
  },
})
```

## Common Anti-Patterns

- ❌ Using direct React Native imports instead of design system components
- ❌ Hardcoded hex values instead of theme tokens
- ❌ Manual StyleSheet creation when component props suffice
- ❌ Inconsistent spacing or typography across components
- ❌ Not using semantic naming for design tokens
- ❌ Missing TypeScript types for component props
- ❌ Creating custom components when design system variants exist

## Migration Strategy

### From React Native Imports

```tsx
// ❌ Before - Direct React Native imports
import { Text, View, Pressable } from 'react-native'

// ✅ After - Design system components
import { Text, Box, Button } from '@/src/design-system/components'
```

### From Manual Styling

```tsx
// ❌ Before - Manual styling
<View style={{
  backgroundColor: '#fff',
  padding: 16,
  borderRadius: 8,
  shadowColor: '#000',
  shadowOffset: { width: 0, height: 2 },
  shadowOpacity: 0.1,
  shadowRadius: 4,
  elevation: 3
}}>
  <Text style={{ fontSize: 18, fontWeight: 'bold' }}>Title</Text>
</View>

// ✅ After - Design system components
<Card variant="elevated" padding="md">
  <Text variant="heading">Title</Text>
</Card>
```

### From Hardcoded Values

```tsx
// ❌ Before - Hardcoded values
const styles = StyleSheet.create({
  container: {
    backgroundColor: '#f0f0f0',
    padding: 16,
    borderRadius: 8,
  },
})

// ✅ After - Theme tokens
const { colors, spacing, radii } = useTheme()
const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.surface,
    padding: spacing.md,
    borderRadius: radii.md,
  },
})
```
